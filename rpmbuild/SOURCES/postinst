#!/usr/bin/env bash
set -e
base="/etc/ddeploy"

restore_conf() {
    conf_folder="/var/tmp/ddeploy/conf"

    if [ ! -d "$conf_folder" ]; then
        return
    fi

    if [ -d "$conf_folder" ] && [ ! -z "$(find "$conf_folder" -mindepth 1 -maxdepth 1 -print -quit)" ]; then
        mv "$conf_folder"/* "$base/configs"
        rm -r "$conf_folder"
    fi
}


update_conf() {
    json_data="$base/configs/deploys.json"
    while IFS= read -r line; do
        folder=$(echo "$line" | jq -r '.folder')
        if [[ -d $folder ]]; then
            cp -r $base/init/app $folder
            cp -r $base/init/entrypoint $folder
            cp -r $base/init/docker-compose.yml $folder
        fi
    done < <(jq -c '.[]' "$json_data")
}

create_cronjobs() {
    # Define the cron job commands
    cronjob="* * * * * $base/maintence/rebuilder.sh"
    # Add the cron job commands to the crontab
    (
        crontab -l
        echo "$cronjob"
    ) | crontab -
}


enable_services(){
    echo -e "Updating systemd\nReload daemon"
    systemctl daemon-reload
    echo "enable ddeploy service"
    systemctl enable ddeploy
    echo "enable ddeploy-cleaner service"
    systemctl enable ddeploy-cleaner

}
start_services() {
    echo -e "Updating systemd\nReload daemon"
    systemctl daemon-reload
    echo "Start ddeploy.service"
    systemctl restart ddeploy
    echo "Start ddeploy-cleaner.service"
    systemctl restart ddeploy-cleaner.service
}

# Install
if  [ "$1" == "1" ] ; then
    echo "Configure new cronjobs ..."
    create_cronjobs
    mkdir -p /var/log/ddeploy
    enable_services
    start_services
fi
# Upgrade
if  [ "$1" == "2" ] ; then
    echo "Restore configuration files ..."
    restore_conf
    echo "Update existing ddeploy enviorment with new configuration"
    update_conf
    start_services
fi